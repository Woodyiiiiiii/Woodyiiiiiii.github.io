<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伍迪的树</title>
  
  
  <link href="http://woodyii.com/atom.xml" rel="self"/>
  
  <link href="http://woodyii.com/"/>
  <updated>2022-01-16T11:02:33.386Z</updated>
  <id>http://woodyii.com/</id>
  
  <author>
    <name>Woodyiiiiiii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://woodyii.com/2022/01/16/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://woodyii.com/2022/01/16/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2022-01-16T10:59:27.000Z</published>
    <updated>2022-01-16T11:02:33.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><span id="more"></span><h2 id="1、分布式系统简介"><a href="#1、分布式系统简介" class="headerlink" title="1、分布式系统简介"></a>1、分布式系统简介</h2><h2 id="2、分布式锁"><a href="#2、分布式锁" class="headerlink" title="2、分布式锁"></a>2、分布式锁</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h1&gt;</summary>
    
    
    
    <category term="Distributed" scheme="http://woodyii.com/categories/Distributed/"/>
    
    
    <category term="Distributed" scheme="http://woodyii.com/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="http://woodyii.com/2022/01/03/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://woodyii.com/2022/01/03/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-03T04:04:12.000Z</published>
    <updated>2022-01-03T04:26:08.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的2021年终总结"><a href="#我的2021年终总结" class="headerlink" title="我的2021年终总结"></a>我的2021年终总结</h1><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>​    想了很多，但当要写下来的时候发现还是无需写这么多了，总结起来就一句话，今年发生的事虽然对我人生很重要，但我的应对一直没尽力，或者说我对我自己做的事不满意。</p><p>​    玩乐太多，花很少的时间学习，没能在最合适的年龄段做自己应该做的事，反而沉迷于虚无的诱惑(刷手机)，这样离我的理想、目标只会越离越远。</p><h2 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h2><p>一、生活健康，锻炼身体</p><p>​    按时睡眠，吃好三餐，抽空锻炼。争取长回正常体重。</p><p>二、学习</p><ol><li><p>Java相关的知识，一直到微服务分布式，希望半年内(2022.7)能够熟练掌握，夯实基础，多写代码，多造轮子，多做设计。</p></li><li><p>熟练掌握Go相关，了解些分布式存储相关的知识，就当业务之外做的玩具。</p></li><li><p>锻炼英语听力，听播客。</p></li></ol><p>​    总之，新的一年要摆脱过去颓废的我，我必须改变自身习惯，严于律己。<strong>没有牺牲，哪有胜利。</strong>最后，希望我和我关心的人今年能身体健康，事事如意。</p><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSTk4ZqDOtnWcp7BJzcLDW7gaNTf2k997EkAA&usqp=CAU" alt="Outer Wilds Wallpapers - Top Free Outer Wilds Backgrounds - WallpaperAccess"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;我的2021年终总结&quot;&gt;&lt;a href=&quot;#我的2021年终总结&quot; class=&quot;headerlink&quot; title=&quot;我的2021年终总结&quot;&gt;&lt;/a&gt;我的2021年终总结&lt;/h1&gt;</summary>
    
    
    
    <category term="thinking" scheme="http://woodyii.com/categories/thinking/"/>
    
    
    <category term="thinking" scheme="http://woodyii.com/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础复习</title>
    <link href="http://woodyii.com/2022/01/01/MySQL%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0(%E4%B8%80)/"/>
    <id>http://woodyii.com/2022/01/01/MySQL%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0(%E4%B8%80)/</id>
    <published>2022-01-01T10:17:07.000Z</published>
    <updated>2022-01-02T09:08:48.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL基础复习-一"><a href="#MySQL基础复习-一" class="headerlink" title="MySQL基础复习(一)"></a>MySQL基础复习(一)</h1><span id="more"></span><h2 id="1、一条SQL查询语句的执行"><a href="#1、一条SQL查询语句的执行" class="headerlink" title="1、一条SQL查询语句的执行"></a>1、一条SQL查询语句的执行</h2><p><strong>MySQL的基本架构如下：</strong></p><p><img src="https://static001.geekbang.org/resource/image/0d/d9/0d2070e8f84c4801adbfa03bda1f98d9.png" alt="MySQL的逻辑架构图"></p><p>模块介绍：</p><ol><li><strong>Server层</strong>：<ol><li>连接器：管理连接，权限验证；尽量使用长连接，但全部使用长连接后有时会导致OOM而MySQL重启，解决方法是5.7以上版本执行mysql_reset_connection 来重新初始化连接资源。 </li><li>缓存：每次更新语句都会清空缓存，弊大于利，所以8.0版本以后此缓存功能已删除。</li><li>分析器：分析SQL语句，比如判断select关键字、字段等。</li><li>优化器：分析语句的执行方案，决定使用什么索引等。</li><li>执行器：先检查是否有该表的权限，接着调用引擎接口，一行行扫描是否符合条件，符合则将此行数据存入内存中。</li></ol></li><li><strong>存储引擎</strong>：<ol><li>分InnoDB、MyISM等等，现在默认为InnoDB，因为其支持事务、行锁、外键等等特性。</li></ol></li></ol><h2 id="2、一条SQL更新语句的执行"><a href="#2、一条SQL更新语句的执行" class="headerlink" title="2、一条SQL更新语句的执行"></a>2、一条SQL更新语句的执行</h2><p>三种日志：</p><ol><li><strong>redo log</strong>：InnoDB引擎独有，以物理记录的方式。SQL更新语句会先记录在redo log，然后更新内存，这样这条语句就执行完成了。接着等到引擎空闲的时候才会将操作记录更新到磁盘中。大小固定，循环的方式存储在磁盘上，一组四个文件，每个文件大小4GB，满了后就会先擦去(执行)语句。作用是保证数据库发生异常重启后，之前提交的记录不会丢失(crash-safe)。</li><li><strong>bin log</strong>：Server层中存储，以逻辑记录的方式，并没有内存限制，记录写满后会继续往下一页写。作用是备份数据(归档)，用来恢复数据(从库到主库)，或者扩容，没有crash- safe能力。</li><li><strong>undo log</strong>：MVCC(多版本并发控制)使用此日志，用来记录行数据更新日志，用来事务记录。</li></ol><p><strong>SQL更新语句的执行</strong>，以<code>select * from T where id = 1这</code>条语句为例：</p><ol><li>Server层一路到执行器，接着执行器通过引擎接口找到id=1这一行数据。如果有索引，则用搜索树内部结构找到。如果内存中有，则直接返回，否则先从磁盘中找到数据，刷到内存后，再从内存中取出。</li><li>执行更新语句，写入内存中。</li><li>redo log记录，状态为prepared状态。</li><li>记录到bin log中。</li><li>更新redo log为commit状态。</li></ol><p><img src="https://static001.geekbang.org/resource/image/2e/be/2e5bff4910ec189fe1ee6e2ecc7b4bbe.png" alt="img"></p><p><strong>为什么redo log和bin log要两阶段提交：</strong></p><p>​    尽量保证两者的一致性，分以下三种情况：</p><pre><code>1. prepared阶段成功，写binlog时失败，此时发现没有commit，回滚，两个日志同样逻辑相同。1. commit失败，但满足prepared成功和bin log也有记录，自动commit。</code></pre><p><strong>数据库备份恢复：</strong></p><p>​    DBA一般能够恢复”半个月内”数据库的任何时刻，从而实现数据库恢复。实现方法是通过定时备份数据(从库)和bin log，假如要恢复到昨天12点的状态，找到距离这个时间之前最近的备份数据(比如可能昨天0点)，然后配合bin log(0点到12点的记录)，从而进行恢复。</p><p>推荐资料：<a href="https://www.codenong.com/cs109624300/">链接</a></p><h2 id="3、事务隔离"><a href="#3、事务隔离" class="headerlink" title="3、事务隔离"></a>3、事务隔离</h2><p>什么是事务？</p><p>事务的四大特性：<strong>ACID</strong>(原子性、持续性、隔离性和持久性)。</p><p>事务可能就出现的问题：<strong>脏读、不可重复读、幻读</strong>。后两者其实都一样，只是针对的语句类型不同，不可重复读是针对查询语句，幻读是针对删除插入语句。</p><p>事务的<strong>四种隔离级别</strong>：</p><ol><li>读未提交(read uncommitted)：会出现以上三种问题。</li><li>读提交(read committed)：解决脏读。事务提交，其所做变更才会被其他事务看到。</li><li>可重复读(repeatable read)：进一步解决不可重复读。事务在执行中看的数据与其刚开始启动时的数据一样。MySQL默认隔离级别。</li><li>串行化(serializable)：进一步解决幻读。加读写锁，性能消耗大。</li></ol><p><strong>事务隔离的实现：</strong></p><p>​    undo log记录事务的变更日志。在不需要的时候才删除，系统判断当没有事务再需要用到这些回滚日志时，回滚日志会被删除。</p><p><strong>tips：</strong></p><p>​    长事务指的是一个流程过长的事务。尽量不要使用长事务。长事务意味着系统里面会存在很老的事务视图，而且这个事务提交之前，其回滚记录都必须保留，这就会导致大量占用存储空间。另外，长事务也会占用锁资源。</p><p><strong>事务的启动方式：</strong></p><pre><code>1. 显式启动事务语句， begin 、start transaction、commit、rollback。1. set autocommit=0。</code></pre><p>推荐资料：<a href="https://cloud.tencent.com/developer/article/1450773">链接</a></p><h2 id="4、索引"><a href="#4、索引" class="headerlink" title="4、索引"></a>4、索引</h2><p>索引的内部结构有哈希表、有序数组和多叉搜索树的形式。</p><p>InnoDB为了减少磁盘IO次数，使用的是**N叉搜索树(B+树)**的形式。</p><p><strong>索引的分类：</strong></p><p>​    主键索引、唯一索引、联合索引和普通索引。</p><p>​    主键索引：非叶子结点存储的是主键，叶子结点存储的是页(数据的存储单位，具体的说是行数据)。</p><p>​    普通索引：非叶子结点存储的是索引条件，叶子结点存储的是主键，然后会去主键索引树进行回表查询。</p><p>​    尽量使用主键索引，并且主键字段不要太长，这样占用空间较小。</p><p><strong>覆盖索引：</strong><br>    不需要回表查询的二级(普通)索引。应用条件是普通索引树已经有我们需要的字段了，比如select后的字段已经在普通索引树上。</p><p><strong>最左前缀原则：</strong><br>    B+树可以利用索引的“最左前缀”，来定位记录。索引项是按照索引定义里面出现的字段顺序排序的。比如当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了，这样就少维护了一个索引，即索引的复用。</p><p><strong>(索引失效)</strong></p><p><strong>索引下推：</strong></p><p>​    在联合索引中，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p>​    </p><h2 id="5、全局锁和表锁"><a href="#5、全局锁和表锁" class="headerlink" title="5、全局锁和表锁"></a>5、全局锁和表锁</h2><p><strong>全局锁：</strong></p><p>​    对整个数据库实例加锁，命令是 Flush tables with read lock (FTWRL)，使得整个数据库变成只读状态，其他增删改、定义语句被阻塞。一般用作全库备份时的操作，避免数据库不一致。</p><p>​    </p><p><strong>表级锁：</strong></p><p>​    分为表锁和元数据锁（meta data lock，MDL)。</p><p>​    <strong>表锁：</strong>分读锁、写锁。写是排他锁，写锁意味着其他线程不能读也不能写。读锁是共享锁，加上后其他锁只能读不能写，本线程也不能写。InnoDB一般使用行锁，表锁影响较大。</p><p>​    <strong>MDL：</strong>不需要显式使用，在访问一个表的时候会被自动加上。同样是读写锁。系统默认添加。所有对表的增删改查操作都需要先申请 MDL 读锁。该锁直到事务提交才释放。</p><p>​    给表加字段时会扫描全表，会使用MDL锁，可能会造成阻塞，即出现命令队列中一个语句占用锁时间过长，导致后面的语句被block，这个时候客户端如果有频繁重试的逻辑就会导致不停的和数据库建立连接，把连接池打满导致库不可用，使得数据库崩溃。</p><p><strong>如何安全地给小表加字段：</strong></p><p>​    在 alter table 语句里面设定等待时间，过时则重试。</p><h2 id="6、行锁"><a href="#6、行锁" class="headerlink" title="6、行锁"></a>6、行锁</h2><p>行锁是在引擎层由各个引擎自己实现的，InnoDB 是支持行锁。</p><p>行锁都是在 commit 的时候才释放的，即<strong>两阶段锁</strong>协议。</p><p>所以如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p><p><strong>死锁和死锁检测：</strong></p><p>出现条件：循环资源依赖。</p><p>解决策略：</p><ol><li>进入等待，直到超时</li><li>死锁检测，发现死锁后主动回滚死锁链条中的某一个事务(正常情况下使用该策略)</li></ol><p>死锁检测有弊端：检测时会扫描其他占用资源的所有线程。比如100个线程同时更新一行，那么会扫描100*100次，消耗大量的 CPU 资源，事务执行少。</p><p>限制死锁：只能尽量控制，一是客户端进行并发控制，但仍可能会出现，比如几个客户端各自限制同时最多三个线程，但汇总到数据库服务端仍会有大量线程；二是改中间件或者MySQL源码(?)；三是考虑通过将一行改成逻辑上的多行来减少锁冲突，使得命中同一行的可能性降低了。</p><h2 id="7、MVCC、行锁、快照"><a href="#7、MVCC、行锁、快照" class="headerlink" title="7、MVCC、行锁、快照"></a>7、MVCC、行锁、快照</h2><p><img src="https://github.com/Woodyiiiiiii/Woodyiiiiiii.github.io/blob/master/images/MVCC%E4%BA%8B%E5%8A%A1%E4%B8%BE%E4%BE%8B%E5%9B%BE.png?raw=true" alt="MVCC事务举例图"></p><p>​    以上图的事务场景举例，我们假设事务C的update语句本身就是一个事务，语句完成的时候会自动提交。然后事务B更新后查询，事务A在这之后，只读。</p><p>​    结论是事务B查的k的值是3，事务A查的k的值是1。</p><p><strong>视图：</strong></p><p>​    我们说的视图目前有两种概念，一种是view，虚拟表；另一种是事务开启时生成的一致性视图，InnoDB使用MVCC创建而成，即 consistent read view，用于支持 RC（读提交）和 RR（可重复读）隔离级别的实现。</p><p><strong>快照：</strong></p><p>​    之前说的MVCC会为每个事务生成快照，这个快照肯定不是真正的表数据，不然太大了，那它到底是什么呢？</p><p>​    首先每行数据可能当下都位于多个事务中，那么每个事务启动时(可能在begin/start transaction时启动，也可能在执行语句时启动，PR前者，RC后者)都会被InnoDB事务系统生成一个唯一的transaction ID(按申请顺序严格递增)，且每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id，所以说每行数据此时此刻可能有多个row trx_id。</p><p>​    根据这个ID，MVCC结合undo log，能够”溯源”，找到以前提交的版本，从而实现”快照”，或者说”视图”的概念。</p><p>​    每个事务开启时，都会有对应的视图数组，表示的是它通过MVCC找到的、它自己承认的、已提交事务的row trx_id集合，即快照。</p><p><img src="https://static001.geekbang.org/resource/image/88/5e/882114aaf55861832b4270d44507695e.png" alt="img"></p><p>​    每个事务读取的数据，绿色的表示之前已提交的事务，红色部分表示的是将来要启动的事务，黄色部分表示一些是在它视图数组里的已提交的事务，另一部分表示不在它视图数组里的未提交的事务。事务能看到的只是绿色和黄色中已提交部分的。</p><p>​    回到之前的事务举例，显然对于隔离级别PR，事务A启动时已生成快照，根据一致性读，查出的k还未改变，所以当然是1。</p><p>​    此外对于事务B，因为其是更新语句，因为要保证其他事务的更新对他有影响，所以有这条规则：更新数据都是先读后写的，并且只能读当前的值，称为“当前读”（current read）。读的是当前事务的数据，所以一开始读的时候k就为2了。除了 update 语句外，select 语句如果加锁，也是当前读。</p><p>​    假设事务C的commit在事务B的更新语句之后，会因为行锁的原因，事务B必须等待事务C的commit。事务 B 是当前读，必须要读最新版本，而且必须加锁。</p><p>​    **可重复读的核心就是一致性读(consistent read)**；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。</p><p>​    读提交与PR的区别是，每一个语句执行前会重新算出一个新的视图。这样按照例子，事务A读的是k的值是2，事务B是3。</p><h2 id="8、扩展：2pc和3pc"><a href="#8、扩展：2pc和3pc" class="headerlink" title="8、扩展：2pc和3pc"></a>8、扩展：2pc和3pc</h2><p>2pc(两阶段提交)，3pc(三阶段提交)。</p><p>推荐资料：<a href="https://www.cnblogs.com/wudimanong/p/10340948.html">链接</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MySQL基础复习-一&quot;&gt;&lt;a href=&quot;#MySQL基础复习-一&quot; class=&quot;headerlink&quot; title=&quot;MySQL基础复习(一)&quot;&gt;&lt;/a&gt;MySQL基础复习(一)&lt;/h1&gt;</summary>
    
    
    
    <category term="DataBase" scheme="http://woodyii.com/categories/DataBase/"/>
    
    
    <category term="MySQL" scheme="http://woodyii.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移到Macbook</title>
    <link href="http://woodyii.com/2021/12/11/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Macbook/"/>
    <id>http://woodyii.com/2021/12/11/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Macbook/</id>
    <published>2021-12-11T12:05:33.000Z</published>
    <updated>2021-12-12T16:41:23.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迁移博客步骤记录"><a href="#迁移博客步骤记录" class="headerlink" title="迁移博客步骤记录"></a>迁移博客步骤记录</h1><span id="more"></span><p>time: 2021-12-11</p><p>source computer: Windows ThinkPad</p><p>target computer: Macbook pro 16</p><p>​    此文记录我将博客文件迁移到新的MacBook上的步骤。</p><h2 id="一、在Mac上安装git、node-js、hexo"><a href="#一、在Mac上安装git、node-js、hexo" class="headerlink" title="一、在Mac上安装git、node.js、hexo"></a>一、在Mac上安装git、node.js、hexo</h2><p>​    下载node: 去<a href="https://nodejs.org/en/]">node.js官网</a>,Current版本为最新版本，LTS为稳定版本</p><p>​    下载hexo: <code>npm i -g hexo</code></p><p>​    最后验证: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git -v</span><br><span class="line">node -v</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="二、迁移重要文件"><a href="#二、迁移重要文件" class="headerlink" title="二、迁移重要文件"></a>二、迁移重要文件</h2><p>​    去原来电脑配置好的hexo目录copy到新电脑的博客目录下，一下为重要目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><h2 id="三、下载必要模块"><a href="#三、下载必要模块" class="headerlink" title="三、下载必要模块"></a>三、下载必要模块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm insatll hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="四、部署hexo"><a href="#四、部署hexo" class="headerlink" title="四、部署hexo"></a>四、部署hexo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><pre><code> 其中报错出现提示&quot;yaml.safeLoad.....&quot;，要把safeLoad替换成load，根据提示文件去替换即可。</code></pre><p>​    因为deploy关联GitHub，会更新远程仓库，可能会报错”<strong>OpenSSL SSL_connect: Connection was reset in connection to github.com:443</strong>“(git pull、git push也有可能有这种情况)，连不上GitHub，可以设置本地代理，因为我本地代理接口是7890，所以输入一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>​    git可能还会有”Permission denied (publickey). fatal: Could not read from remote repository”的错误，需要本地设置ssh key: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 1.查看本地是否有id_rsa以及文件id_rsa.pub</span><br><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">// 2.有的话不管了，没有的话继续一下步骤</span><br><span class="line">//   一路回车</span><br><span class="line">ssh-keygen -t rsa -C “youremail@example.com”</span><br><span class="line"></span><br><span class="line">// 3.测试是否连接自己的GitHub</span><br><span class="line">//   出现No more authentication methods to try.Permission denied (publickey).</span><br><span class="line">ssh -v git@github.com</span><br><span class="line"></span><br><span class="line">// 4.设置agent</span><br><span class="line">//   出现SSH_AUTH_SOCK=/tmp/ssh-GTpABX1a05qH/agent.404; export SSH_AUTH_SOCK;SSH_AGENT_PID=13144; export SSH_AGENT_PID;</span><br><span class="line">ssh-agent -s</span><br><span class="line"></span><br><span class="line">// 5.添加</span><br><span class="line">//   提示Identity added: …</span><br><span class="line">//   若提示　Could not open a connection to your authentication agent.</span><br><span class="line">//   则执行eval ssh-agent -s后再执行一下命令</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">// 6.去远程仓库添加，打开id_rsa.pub，复制后进入GitHub的settings，SSH and GPG keys生成new SSH key，复制到Key，然后add</span><br><span class="line"></span><br><span class="line">// 7.验证</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、启动"><a href="#五、启动" class="headerlink" title="五、启动"></a>五、启动</h2><p>​    如下是如何写博客及相关命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 1.在source/_posts下新建博客</span><br><span class="line">hexo new &quot;文章名&quot;</span><br><span class="line"></span><br><span class="line">// 2.去_posts下打开文件，编写tag category，然后写内容</span><br><span class="line">//   用&lt;!--more--&gt;截取摘要</span><br><span class="line"></span><br><span class="line">// 3.本地启动查看,默认4000端口</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line">// 4.部署</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;迁移博客步骤记录&quot;&gt;&lt;a href=&quot;#迁移博客步骤记录&quot; class=&quot;headerlink&quot; title=&quot;迁移博客步骤记录&quot;&gt;&lt;/a&gt;迁移博客步骤记录&lt;/h1&gt;</summary>
    
    
    
    <category term="others" scheme="http://woodyii.com/categories/others/"/>
    
    
    <category term="others" scheme="http://woodyii.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>关于搭建我的博客</title>
    <link href="http://woodyii.com/2020/12/29/blogConfig/"/>
    <id>http://woodyii.com/2020/12/29/blogConfig/</id>
    <published>2020-12-29T04:46:37.000Z</published>
    <updated>2021-12-12T16:41:06.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于搭建我的博客的经历"><a href="#关于搭建我的博客的经历" class="headerlink" title="关于搭建我的博客的经历"></a>关于搭建我的博客的经历</h1><span id="more"></span><p>最近闲来无事，并且刚好看到别人精美的博客，我就想着是时候重新搭建一个博客了。其实我之前已经有过一个同样用GitHub Pages配合Hexo搭建的博客，但因为我感觉不是很美观，再加上域名问题和换了个新电脑，所以又抛弃了。这次重新搭建博客也想着是时候重新开始我的新的编程经历，努力多<del>水</del>写技术文章，记录我的生活。</p><p>一开始我想用Jekyll+Github Pages的方式来搭建，但在这过程中我踩了很多坑，所以放弃了这种方法，重新回到以前搭建博客的方式，就是Hexo(next主题)+Github Pages的方式。</p><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><hr><p>既然使用Hexo和Github Pages的方式，那么就需要安装npm，Node.js和hexo了，安装这几者的过程不赘述了，最后可以检测下环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v        // 我的是6.14.9版本</span><br><span class="line">node -v       // 我的是v14.15.3版本</span><br></pre></td></tr></table></figure><p>接着是在Github上申请Github Pages，过程简单，只要创建一个新仓库，名字为“用户名.github.io”，就自动生成成功了，访问URL：用户名.github.io。如果对URL不满意，还可以设置域名，我是在阿里云上购买了新的域名，然后在阿里云控制台设置两个域名的绑定，然后在这个Github仓库的设置里的域名处添加新的域名，这样在Github仓库会生成一个CNAME文件，如果想在本地仓库也设置CNAME文件，在主题里创建一个一样的CNAME文件就行了。</p><p>next主题我没有使用官方的，因为我使用官方的主题会出现乱码的情况，所以我使用了别人优化过的next，具体网址是：<a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></p><h2 id="二、搭建结构"><a href="#二、搭建结构" class="headerlink" title="二、搭建结构"></a>二、搭建结构</h2><hr><p>在themes文件夹下可以新建一个next文件夹，然后使用git clone命令来下载next主题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>注意有两个重要的配置文件，一个是在blog根目录下的<strong>站点配置文件</strong>_config.yml，一个是next文件夹下**主题配置文件 ** _config.yml，改动这两个文件的设置就可以改动博客。</p><p>现在在根目录下的cmd命令行，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure><p>没有问题的话就可以在localhost:4000查看使用next主题的博客了。</p><p>接下来我们要添加博客的目录，比如归档archives，目录categories，标签tag和关于about等。在主题配置文件中的menu下一一打开，调整顺序，然后在cmd命令行中这样配置，以目录为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>然后会在source下生成对应文件夹和md文件，在md文件中设置type：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><h2 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><hr><p>关于博客的优化就有很多参考了，下面我就做一些主要优化的说明。</p><h3 id="1-站点logo"><a href="#1-站点logo" class="headerlink" title="1. 站点logo"></a>1. 站点logo</h3><hr><h3 id="2-头像"><a href="#2-头像" class="headerlink" title="2. 头像"></a>2. 头像</h3><hr><h3 id="3-链接"><a href="#3-链接" class="headerlink" title="3. 链接"></a>3. 链接</h3><hr><h3 id="4-字体"><a href="#4-字体" class="headerlink" title="4. 字体"></a>4. 字体</h3><hr><p>在配置文件中打开并设置</p><h3 id="5-动态背景"><a href="#5-动态背景" class="headerlink" title="5. 动态背景"></a>5. 动态背景</h3><hr><p>配置文件中打开</p><h3 id="6-评论"><a href="#6-评论" class="headerlink" title="6. 评论"></a>6. 评论</h3><hr><p>Gitalk设置，并且在GitHub中写自己配置的域名。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于搭建我的博客的经历&quot;&gt;&lt;a href=&quot;#关于搭建我的博客的经历&quot; class=&quot;headerlink&quot; title=&quot;关于搭建我的博客的经历&quot;&gt;&lt;/a&gt;关于搭建我的博客的经历&lt;/h1&gt;</summary>
    
    
    
    <category term="others" scheme="http://woodyii.com/categories/others/"/>
    
    
    <category term="others" scheme="http://woodyii.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Teach Yourself Programming in Ten Years</title>
    <link href="http://woodyii.com/2020/12/28/test/"/>
    <id>http://woodyii.com/2020/12/28/test/</id>
    <published>2020-12-28T10:55:45.000Z</published>
    <updated>2021-12-12T16:41:15.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-is-everyone-in-such-a-rush"><a href="#Why-is-everyone-in-such-a-rush" class="headerlink" title="Why is everyone in such a rush?"></a>Why is everyone in such a rush?</h2><span id="more"></span><p>Walk into any bookstore, and you’ll see how to <em>Teach Yourself Java in 7 Days</em> alongside endless variations offering to teach Visual Basic, Windows, the Internet, and so on in a few days or hours. I did the following <a href="http://www.amazon.com/exec/obidos/tg/browse/-/468558/104-5938873-6579160">power search</a> at <a href="http://www.amazon.com/">Amazon.com</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pubdate: after 1992 and title: days and</span><br><span class="line"> (title: learn or title: teach yourself)</span><br></pre></td></tr></table></figure><p>and got back 248 hits. The first 78 were computer books (number 79 was <a href="http://www.amazon.com/exec/obidos/ASIN/0781802245/"><em>Learn Bengali in 30 days</em></a>). I replaced “days” with [“hours”](<a href="http://www.amazon.com/exec/obidos/search-handle-url/ix=books&amp;rank=%2Bfeaturedrank&amp;fqp=power%01pubdate%3A">http://www.amazon.com/exec/obidos/search-handle-url/ix=books&amp;rank=%2Bfeaturedrank&amp;fqp=powerpubdate%3A</a> after 1992 and title%3A hours and (title%3A learn or title%3A teach yourself)&amp;sz=25&amp;pg=3/ref=s_b_np) and got remarkably similar results: 253 more books, with 77 computer books followed by <a href="http://www.amazon.com/exec/obidos/ASIN/0028638999/"><em>Teach Yourself Grammar and Style in 24 Hours</em></a> at number 78. Out of the top 200 total, 96% were computer books.</p><p>The conclusion is that either people are in a big rush to learn about computers, or that computers are somehow fabulously easier to learn than anything else. There are no books on how to learn Beethoven, or Quantum Physics, or even Dog Grooming in a few days.</p><p>Let’s analyze what a title like <em><a href="http://www.amazon.com/exec/obidos/ISBN=1556225679/4094-7934802-027992">Learn Pascal in Three Days</a></em> could mean:</p><ul><li><p>Learn:</p><p>In 3 days you won’t have time to write several significant programs, and learn from your successes and failures with them. You won’t have time to work with an experienced programmer and understand what it is like to live in that environment. In short, you won’t have time to learn much. So they can only be talking about a superficial familiarity, not a deep understanding. As Alexander Pope said, a little learning is a dangerous thing.</p></li><li><p>Pascal:</p><p>In 3 days you might be able to learn the syntax of Pascal (if you already knew a similar language), but you couldn’t learn much about how to use the syntax. In short, if you were, say, a Basic programmer, you could learn to write programs in the style of Basic using Pascal syntax, but you couldn’t learn what Pascal is actually good (and bad) for. So what’s the point?</p><p>Alan Perlis</p><p>once said: “A language that doesn’t affect the way you think about programming, is not worth knowing”. One possible point is that you have to learn a tiny bit of Pascal (or more likely, something like Visual Basic or JavaScript) because you need to interface with an existing tool to accomplish a specific task. But then you’re not learning how to program; you’re learning to accomplish that task.</p></li><li><p><strong>in Three Days:</strong> Unfortunately, this is not enough, as the next section shows.</p></li></ul><h2 id="Teach-Yourself-Programming-in-Ten-Years"><a href="#Teach-Yourself-Programming-in-Ten-Years" class="headerlink" title="Teach Yourself Programming in Ten Years"></a>Teach Yourself Programming in Ten Years</h2><p>Researchers (<a href="http://www.amazon.com/exec/obidos/ASIN/0805803092">Hayes</a>, <a href="http://www.amazon.com/exec/obidos/ASIN/034531509X/">Bloom</a>) have shown it takes about ten years to develop expertise in any of a wide variety of areas, including chess playing, music composition, painting, piano playing, swimming, tennis, and research in neuropsychology and topology. There appear to be no real shortcuts: even Mozart, who was a musical prodigy at age 4, took 13 more years before he began to produce world-class music. In another genre, the Beatles seemed to burst onto the scene with a string of #1 hits and an appearance on the Ed Sullivan show in 1964. But they had been playing small clubs in Liverpool and Hamburg since 1957, and while they had mass appeal early on, their first great critical success, <em>Sgt. Peppers</em>, was released in 1967. Samuel Johnson thought it took longer than ten years: “Excellence in any department can be attained only by the labor of a lifetime; it is not to be purchased at a lesser price.” And Chaucer complained “the lyf so short, the craft so long to lerne.”</p><p>Here’s my recipe for programming success:</p><ul><li><p>Get interested in programming, and do some because it is fun. Make sure that it keeps being enough fun so that you will be willing to put in ten years.</p></li><li><p>Talk to other programmers; read other programs. This is more important than any book or training course.</p></li><li><p>Program. The best kind of learning is</p><p>learning by doing</p><p>. To put it more technically, “the maximal level of performance for individuals in a given domain is not attained automatically as a function of extended experience, but the level of performance can be increased even by highly experienced individuals as a result of deliberate efforts to improve.”</p><p>(p. 366)</p><p>and “the most effective learning requires a well-defined task with an appropriate difficulty level for the particular individual, informative feedback, and opportunities for repetition and corrections of errors.” (p. 20-21) The book</p><p><a href="http://www.amazon.com/exec/obidos/ASIN/0521357349">Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life</a></p><p>is an interesting reference for this viewpoint.</p></li><li><p>If you want, put in four years at a college (or more at a graduate school). This will give you access to some jobs that require credentials, and it will give you a deeper understanding of the field, but if you don’t enjoy school, you can (with some dedication) get similar experience on the job. In any case, book learning alone won’t be enough. “Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter” says Eric Raymond, author of</p><p>The New Hacker’s Dictionary</p><p>. One of the best programmers I ever hired had only a High School degree; he’s produced a lot of</p><p>great</p><p>software</p><p>, has his own</p><p>news group</p><p>, and through stock options is no doubt much richer than I’ll ever be.</p></li><li><p>Work on projects with other programmers. Be the best programmer on some projects; be the worst on some others. When you’re the best, you get to test your abilities to lead a project, and to inspire others with your vision. When you’re the worst, you learn what the masters do, and you learn what they don’t like to do (because they make you do it for them).</p></li><li><p>Work on projects</p><p>after</p><p>other programmers. Be involved in understanding a program written by someone else. See what it takes to understand and fix it when the original programmers are not around. Think about how to design your programs to make it easier for those who will maintain it after you.</p></li><li><p>Learn at least a half dozen programming languages. Include one language that supports class abstractions (like Java or C++), one that supports functional abstraction (like Lisp or ML), one that supports syntactic abstraction (like Lisp), one that supports declarative specifications (like Prolog or C++ templates), one that supports coroutines (like Icon or Scheme), and one that supports parallelism (like Sisal).</p></li><li><p>Remember that there is a “computer” in “computer science”. Know how long it takes your computer to execute an instruction, fetch a word from memory (with and without a cache miss), read consecutive words from disk, and seek to a new location on disk. (</p><p>Answers here.</p><p>)</p></li><li><p>Get involved in a language standardization effort. It could be the ANSI C++ committee, or it could be deciding if your local coding style will have 2 or 4 space indentation levels. Either way, you learn about what other people like in a language, how deeply they feel so, and perhaps even a little about why they feel so.</p></li><li><p>Have the good sense to get off the language standardization effort as quickly as possible.</p></li></ul><p>With all that in mind, its questionable how far you can get just by book learning. Before my first child was born, I read all the <em>How To</em> books, and still felt like a clueless novice. 30 Months later, when my second child was due, did I go back to the books for a refresher? No. Instead, I relied on my personal experience, which turned out to be far more useful and reassuring to me than the thousands of pages written by experts.</p><p>Fred Brooks, in his essay <em><a href="http://citeseer.nj.nec.com/context/7718/0">No Silver Bullets</a></em> identified a three-part plan for finding great software designers:</p><ol><li><p>Systematically identify top designers as early as possible.</p></li><li><p>Assign a career mentor to be responsible for the development of the prospect and carefully keep a career file.</p></li><li><p>Provide opportunities for growing designers to interact and stimulate each other.</p></li></ol><p>This assumes that some people already have the qualities necessary for being a great designer; the job is to properly coax them along. <a href="http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html">Alan Perlis</a> put it more succinctly: “Everyone can be taught to sculpt: Michelangelo would have had to be taught how not to. So it is with the great programmers”.</p><p>So go ahead and buy that Java book; you’ll probably get some use out of it. But you won’t change your life, or your real overall expertise as a programmer in 24 hours, days, or even months.</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Bloom, Benjamin (ed.) <em><a href="http://www.amazon.com/exec/obidos/ASIN/034531509X">Developing Talent in Young People</a></em>, Ballantine, 1985.</p><p>Brooks, Fred, <em><a href="http://citeseer.nj.nec.com/context/7718/0">No Silver Bullets</a></em>, IEEE Computer, vol. 20, no. 4, 1987, p. 10-19.</p><p>Hayes, John R., <em><a href="http://www.amazon.com/exec/obidos/ASIN/0805803092">Complete Problem Solver</a></em> Lawrence Erlbaum, 1989.</p><p>Lave, Jean, <em><a href="http://www.amazon.com/exec/obidos/ASIN/0521357349">Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life</a></em>, Cambridge University Press, 1988.</p><hr><p><a href="https://arantius.com/misc/mirror/index.html"><em>Peter Norvig</em> (Copyright 2001)</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Why-is-everyone-in-such-a-rush&quot;&gt;&lt;a href=&quot;#Why-is-everyone-in-such-a-rush&quot; class=&quot;headerlink&quot; title=&quot;Why is everyone in such a rush?&quot;&gt;&lt;/a&gt;Why is everyone in such a rush?&lt;/h2&gt;</summary>
    
    
    
    <category term="others" scheme="http://woodyii.com/categories/others/"/>
    
    
    <category term="others" scheme="http://woodyii.com/tags/others/"/>
    
  </entry>
  
</feed>
