<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伍迪的树</title>
  
  
  <link href="http://woodyii.com/atom.xml" rel="self"/>
  
  <link href="http://woodyii.com/"/>
  <updated>2021-12-12T16:41:23.933Z</updated>
  <id>http://woodyii.com/</id>
  
  <author>
    <name>Woodyiiiiiii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客迁移到Macbook</title>
    <link href="http://woodyii.com/2021/12/11/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Macbook/"/>
    <id>http://woodyii.com/2021/12/11/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Macbook/</id>
    <published>2021-12-11T12:05:33.000Z</published>
    <updated>2021-12-12T16:41:23.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迁移博客步骤记录"><a href="#迁移博客步骤记录" class="headerlink" title="迁移博客步骤记录"></a>迁移博客步骤记录</h1><span id="more"></span><p>time: 2021-12-11</p><p>source computer: Windows ThinkPad</p><p>target computer: Macbook pro 16</p><p>​    此文记录我将博客文件迁移到新的MacBook上的步骤。</p><h2 id="一、在Mac上安装git、node-js、hexo"><a href="#一、在Mac上安装git、node-js、hexo" class="headerlink" title="一、在Mac上安装git、node.js、hexo"></a>一、在Mac上安装git、node.js、hexo</h2><p>​    下载node: 去<a href="https://nodejs.org/en/]">node.js官网</a>,Current版本为最新版本，LTS为稳定版本</p><p>​    下载hexo: <code>npm i -g hexo</code></p><p>​    最后验证: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git -v</span><br><span class="line">node -v</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="二、迁移重要文件"><a href="#二、迁移重要文件" class="headerlink" title="二、迁移重要文件"></a>二、迁移重要文件</h2><p>​    去原来电脑配置好的hexo目录copy到新电脑的博客目录下，一下为重要目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><h2 id="三、下载必要模块"><a href="#三、下载必要模块" class="headerlink" title="三、下载必要模块"></a>三、下载必要模块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm insatll hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="四、部署hexo"><a href="#四、部署hexo" class="headerlink" title="四、部署hexo"></a>四、部署hexo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><pre><code> 其中报错出现提示&quot;yaml.safeLoad.....&quot;，要把safeLoad替换成load，根据提示文件去替换即可。</code></pre><p>​    因为deploy关联GitHub，会更新远程仓库，可能会报错”<strong>OpenSSL SSL_connect: Connection was reset in connection to github.com:443</strong>“(git pull、git push也有可能有这种情况)，连不上GitHub，可以设置本地代理，因为我本地代理接口是7890，所以输入一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>​    git可能还会有”Permission denied (publickey). fatal: Could not read from remote repository”的错误，需要本地设置ssh key: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 1.查看本地是否有id_rsa以及文件id_rsa.pub</span><br><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">// 2.有的话不管了，没有的话继续一下步骤</span><br><span class="line">//   一路回车</span><br><span class="line">ssh-keygen -t rsa -C “youremail@example.com”</span><br><span class="line"></span><br><span class="line">// 3.测试是否连接自己的GitHub</span><br><span class="line">//   出现No more authentication methods to try.Permission denied (publickey).</span><br><span class="line">ssh -v git@github.com</span><br><span class="line"></span><br><span class="line">// 4.设置agent</span><br><span class="line">//   出现SSH_AUTH_SOCK=/tmp/ssh-GTpABX1a05qH/agent.404; export SSH_AUTH_SOCK;SSH_AGENT_PID=13144; export SSH_AGENT_PID;</span><br><span class="line">ssh-agent -s</span><br><span class="line"></span><br><span class="line">// 5.添加</span><br><span class="line">//   提示Identity added: …</span><br><span class="line">//   若提示　Could not open a connection to your authentication agent.</span><br><span class="line">//   则执行eval ssh-agent -s后再执行一下命令</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">// 6.去远程仓库添加，打开id_rsa.pub，复制后进入GitHub的settings，SSH and GPG keys生成new SSH key，复制到Key，然后add</span><br><span class="line"></span><br><span class="line">// 7.验证</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、启动"><a href="#五、启动" class="headerlink" title="五、启动"></a>五、启动</h2><p>​    如下是如何写博客及相关命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 1.在source/_posts下新建博客</span><br><span class="line">hexo new &quot;文章名&quot;</span><br><span class="line"></span><br><span class="line">// 2.去_posts下打开文件，编写tag category，然后写内容</span><br><span class="line">//   用&lt;!--more--&gt;截取摘要</span><br><span class="line"></span><br><span class="line">// 3.本地启动查看,默认4000端口</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line">// 4.部署</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;迁移博客步骤记录&quot;&gt;&lt;a href=&quot;#迁移博客步骤记录&quot; class=&quot;headerlink&quot; title=&quot;迁移博客步骤记录&quot;&gt;&lt;/a&gt;迁移博客步骤记录&lt;/h1&gt;</summary>
    
    
    
    <category term="others" scheme="http://woodyii.com/categories/others/"/>
    
    
    <category term="others" scheme="http://woodyii.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>关于搭建我的博客</title>
    <link href="http://woodyii.com/2020/12/29/blogConfig/"/>
    <id>http://woodyii.com/2020/12/29/blogConfig/</id>
    <published>2020-12-29T04:46:37.000Z</published>
    <updated>2021-12-12T16:41:06.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于搭建我的博客的经历"><a href="#关于搭建我的博客的经历" class="headerlink" title="关于搭建我的博客的经历"></a>关于搭建我的博客的经历</h1><span id="more"></span><p>最近闲来无事，并且刚好看到别人精美的博客，我就想着是时候重新搭建一个博客了。其实我之前已经有过一个同样用GitHub Pages配合Hexo搭建的博客，但因为我感觉不是很美观，再加上域名问题和换了个新电脑，所以又抛弃了。这次重新搭建博客也想着是时候重新开始我的新的编程经历，努力多<del>水</del>写技术文章，记录我的生活。</p><p>一开始我想用Jekyll+Github Pages的方式来搭建，但在这过程中我踩了很多坑，所以放弃了这种方法，重新回到以前搭建博客的方式，就是Hexo(next主题)+Github Pages的方式。</p><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><hr><p>既然使用Hexo和Github Pages的方式，那么就需要安装npm，Node.js和hexo了，安装这几者的过程不赘述了，最后可以检测下环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v        // 我的是6.14.9版本</span><br><span class="line">node -v       // 我的是v14.15.3版本</span><br></pre></td></tr></table></figure><p>接着是在Github上申请Github Pages，过程简单，只要创建一个新仓库，名字为“用户名.github.io”，就自动生成成功了，访问URL：用户名.github.io。如果对URL不满意，还可以设置域名，我是在阿里云上购买了新的域名，然后在阿里云控制台设置两个域名的绑定，然后在这个Github仓库的设置里的域名处添加新的域名，这样在Github仓库会生成一个CNAME文件，如果想在本地仓库也设置CNAME文件，在主题里创建一个一样的CNAME文件就行了。</p><p>next主题我没有使用官方的，因为我使用官方的主题会出现乱码的情况，所以我使用了别人优化过的next，具体网址是：<a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></p><h2 id="二、搭建结构"><a href="#二、搭建结构" class="headerlink" title="二、搭建结构"></a>二、搭建结构</h2><hr><p>在themes文件夹下可以新建一个next文件夹，然后使用git clone命令来下载next主题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>注意有两个重要的配置文件，一个是在blog根目录下的<strong>站点配置文件</strong>_config.yml，一个是next文件夹下**主题配置文件 ** _config.yml，改动这两个文件的设置就可以改动博客。</p><p>现在在根目录下的cmd命令行，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure><p>没有问题的话就可以在localhost:4000查看使用next主题的博客了。</p><p>接下来我们要添加博客的目录，比如归档archives，目录categories，标签tag和关于about等。在主题配置文件中的menu下一一打开，调整顺序，然后在cmd命令行中这样配置，以目录为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>然后会在source下生成对应文件夹和md文件，在md文件中设置type：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><h2 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><hr><p>关于博客的优化就有很多参考了，下面我就做一些主要优化的说明。</p><h3 id="1-站点logo"><a href="#1-站点logo" class="headerlink" title="1. 站点logo"></a>1. 站点logo</h3><hr><h3 id="2-头像"><a href="#2-头像" class="headerlink" title="2. 头像"></a>2. 头像</h3><hr><h3 id="3-链接"><a href="#3-链接" class="headerlink" title="3. 链接"></a>3. 链接</h3><hr><h3 id="4-字体"><a href="#4-字体" class="headerlink" title="4. 字体"></a>4. 字体</h3><hr><p>在配置文件中打开并设置</p><h3 id="5-动态背景"><a href="#5-动态背景" class="headerlink" title="5. 动态背景"></a>5. 动态背景</h3><hr><p>配置文件中打开</p><h3 id="6-评论"><a href="#6-评论" class="headerlink" title="6. 评论"></a>6. 评论</h3><hr><p>Gitalk设置，并且在GitHub中写自己配置的域名。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于搭建我的博客的经历&quot;&gt;&lt;a href=&quot;#关于搭建我的博客的经历&quot; class=&quot;headerlink&quot; title=&quot;关于搭建我的博客的经历&quot;&gt;&lt;/a&gt;关于搭建我的博客的经历&lt;/h1&gt;</summary>
    
    
    
    <category term="others" scheme="http://woodyii.com/categories/others/"/>
    
    
    <category term="others" scheme="http://woodyii.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Teach Yourself Programming in Ten Years</title>
    <link href="http://woodyii.com/2020/12/28/test/"/>
    <id>http://woodyii.com/2020/12/28/test/</id>
    <published>2020-12-28T10:55:45.000Z</published>
    <updated>2021-12-12T16:41:15.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-is-everyone-in-such-a-rush"><a href="#Why-is-everyone-in-such-a-rush" class="headerlink" title="Why is everyone in such a rush?"></a>Why is everyone in such a rush?</h2><span id="more"></span><p>Walk into any bookstore, and you’ll see how to <em>Teach Yourself Java in 7 Days</em> alongside endless variations offering to teach Visual Basic, Windows, the Internet, and so on in a few days or hours. I did the following <a href="http://www.amazon.com/exec/obidos/tg/browse/-/468558/104-5938873-6579160">power search</a> at <a href="http://www.amazon.com/">Amazon.com</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pubdate: after 1992 and title: days and</span><br><span class="line"> (title: learn or title: teach yourself)</span><br></pre></td></tr></table></figure><p>and got back 248 hits. The first 78 were computer books (number 79 was <a href="http://www.amazon.com/exec/obidos/ASIN/0781802245/"><em>Learn Bengali in 30 days</em></a>). I replaced “days” with [“hours”](<a href="http://www.amazon.com/exec/obidos/search-handle-url/ix=books&amp;rank=%2Bfeaturedrank&amp;fqp=power%01pubdate%3A">http://www.amazon.com/exec/obidos/search-handle-url/ix=books&amp;rank=%2Bfeaturedrank&amp;fqp=powerpubdate%3A</a> after 1992 and title%3A hours and (title%3A learn or title%3A teach yourself)&amp;sz=25&amp;pg=3/ref=s_b_np) and got remarkably similar results: 253 more books, with 77 computer books followed by <a href="http://www.amazon.com/exec/obidos/ASIN/0028638999/"><em>Teach Yourself Grammar and Style in 24 Hours</em></a> at number 78. Out of the top 200 total, 96% were computer books.</p><p>The conclusion is that either people are in a big rush to learn about computers, or that computers are somehow fabulously easier to learn than anything else. There are no books on how to learn Beethoven, or Quantum Physics, or even Dog Grooming in a few days.</p><p>Let’s analyze what a title like <em><a href="http://www.amazon.com/exec/obidos/ISBN=1556225679/4094-7934802-027992">Learn Pascal in Three Days</a></em> could mean:</p><ul><li><p>Learn:</p><p>In 3 days you won’t have time to write several significant programs, and learn from your successes and failures with them. You won’t have time to work with an experienced programmer and understand what it is like to live in that environment. In short, you won’t have time to learn much. So they can only be talking about a superficial familiarity, not a deep understanding. As Alexander Pope said, a little learning is a dangerous thing.</p></li><li><p>Pascal:</p><p>In 3 days you might be able to learn the syntax of Pascal (if you already knew a similar language), but you couldn’t learn much about how to use the syntax. In short, if you were, say, a Basic programmer, you could learn to write programs in the style of Basic using Pascal syntax, but you couldn’t learn what Pascal is actually good (and bad) for. So what’s the point?</p><p>Alan Perlis</p><p>once said: “A language that doesn’t affect the way you think about programming, is not worth knowing”. One possible point is that you have to learn a tiny bit of Pascal (or more likely, something like Visual Basic or JavaScript) because you need to interface with an existing tool to accomplish a specific task. But then you’re not learning how to program; you’re learning to accomplish that task.</p></li><li><p><strong>in Three Days:</strong> Unfortunately, this is not enough, as the next section shows.</p></li></ul><h2 id="Teach-Yourself-Programming-in-Ten-Years"><a href="#Teach-Yourself-Programming-in-Ten-Years" class="headerlink" title="Teach Yourself Programming in Ten Years"></a>Teach Yourself Programming in Ten Years</h2><p>Researchers (<a href="http://www.amazon.com/exec/obidos/ASIN/0805803092">Hayes</a>, <a href="http://www.amazon.com/exec/obidos/ASIN/034531509X/">Bloom</a>) have shown it takes about ten years to develop expertise in any of a wide variety of areas, including chess playing, music composition, painting, piano playing, swimming, tennis, and research in neuropsychology and topology. There appear to be no real shortcuts: even Mozart, who was a musical prodigy at age 4, took 13 more years before he began to produce world-class music. In another genre, the Beatles seemed to burst onto the scene with a string of #1 hits and an appearance on the Ed Sullivan show in 1964. But they had been playing small clubs in Liverpool and Hamburg since 1957, and while they had mass appeal early on, their first great critical success, <em>Sgt. Peppers</em>, was released in 1967. Samuel Johnson thought it took longer than ten years: “Excellence in any department can be attained only by the labor of a lifetime; it is not to be purchased at a lesser price.” And Chaucer complained “the lyf so short, the craft so long to lerne.”</p><p>Here’s my recipe for programming success:</p><ul><li><p>Get interested in programming, and do some because it is fun. Make sure that it keeps being enough fun so that you will be willing to put in ten years.</p></li><li><p>Talk to other programmers; read other programs. This is more important than any book or training course.</p></li><li><p>Program. The best kind of learning is</p><p>learning by doing</p><p>. To put it more technically, “the maximal level of performance for individuals in a given domain is not attained automatically as a function of extended experience, but the level of performance can be increased even by highly experienced individuals as a result of deliberate efforts to improve.”</p><p>(p. 366)</p><p>and “the most effective learning requires a well-defined task with an appropriate difficulty level for the particular individual, informative feedback, and opportunities for repetition and corrections of errors.” (p. 20-21) The book</p><p><a href="http://www.amazon.com/exec/obidos/ASIN/0521357349">Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life</a></p><p>is an interesting reference for this viewpoint.</p></li><li><p>If you want, put in four years at a college (or more at a graduate school). This will give you access to some jobs that require credentials, and it will give you a deeper understanding of the field, but if you don’t enjoy school, you can (with some dedication) get similar experience on the job. In any case, book learning alone won’t be enough. “Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter” says Eric Raymond, author of</p><p>The New Hacker’s Dictionary</p><p>. One of the best programmers I ever hired had only a High School degree; he’s produced a lot of</p><p>great</p><p>software</p><p>, has his own</p><p>news group</p><p>, and through stock options is no doubt much richer than I’ll ever be.</p></li><li><p>Work on projects with other programmers. Be the best programmer on some projects; be the worst on some others. When you’re the best, you get to test your abilities to lead a project, and to inspire others with your vision. When you’re the worst, you learn what the masters do, and you learn what they don’t like to do (because they make you do it for them).</p></li><li><p>Work on projects</p><p>after</p><p>other programmers. Be involved in understanding a program written by someone else. See what it takes to understand and fix it when the original programmers are not around. Think about how to design your programs to make it easier for those who will maintain it after you.</p></li><li><p>Learn at least a half dozen programming languages. Include one language that supports class abstractions (like Java or C++), one that supports functional abstraction (like Lisp or ML), one that supports syntactic abstraction (like Lisp), one that supports declarative specifications (like Prolog or C++ templates), one that supports coroutines (like Icon or Scheme), and one that supports parallelism (like Sisal).</p></li><li><p>Remember that there is a “computer” in “computer science”. Know how long it takes your computer to execute an instruction, fetch a word from memory (with and without a cache miss), read consecutive words from disk, and seek to a new location on disk. (</p><p>Answers here.</p><p>)</p></li><li><p>Get involved in a language standardization effort. It could be the ANSI C++ committee, or it could be deciding if your local coding style will have 2 or 4 space indentation levels. Either way, you learn about what other people like in a language, how deeply they feel so, and perhaps even a little about why they feel so.</p></li><li><p>Have the good sense to get off the language standardization effort as quickly as possible.</p></li></ul><p>With all that in mind, its questionable how far you can get just by book learning. Before my first child was born, I read all the <em>How To</em> books, and still felt like a clueless novice. 30 Months later, when my second child was due, did I go back to the books for a refresher? No. Instead, I relied on my personal experience, which turned out to be far more useful and reassuring to me than the thousands of pages written by experts.</p><p>Fred Brooks, in his essay <em><a href="http://citeseer.nj.nec.com/context/7718/0">No Silver Bullets</a></em> identified a three-part plan for finding great software designers:</p><ol><li><p>Systematically identify top designers as early as possible.</p></li><li><p>Assign a career mentor to be responsible for the development of the prospect and carefully keep a career file.</p></li><li><p>Provide opportunities for growing designers to interact and stimulate each other.</p></li></ol><p>This assumes that some people already have the qualities necessary for being a great designer; the job is to properly coax them along. <a href="http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html">Alan Perlis</a> put it more succinctly: “Everyone can be taught to sculpt: Michelangelo would have had to be taught how not to. So it is with the great programmers”.</p><p>So go ahead and buy that Java book; you’ll probably get some use out of it. But you won’t change your life, or your real overall expertise as a programmer in 24 hours, days, or even months.</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Bloom, Benjamin (ed.) <em><a href="http://www.amazon.com/exec/obidos/ASIN/034531509X">Developing Talent in Young People</a></em>, Ballantine, 1985.</p><p>Brooks, Fred, <em><a href="http://citeseer.nj.nec.com/context/7718/0">No Silver Bullets</a></em>, IEEE Computer, vol. 20, no. 4, 1987, p. 10-19.</p><p>Hayes, John R., <em><a href="http://www.amazon.com/exec/obidos/ASIN/0805803092">Complete Problem Solver</a></em> Lawrence Erlbaum, 1989.</p><p>Lave, Jean, <em><a href="http://www.amazon.com/exec/obidos/ASIN/0521357349">Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life</a></em>, Cambridge University Press, 1988.</p><hr><p><a href="https://arantius.com/misc/mirror/index.html"><em>Peter Norvig</em> (Copyright 2001)</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Why-is-everyone-in-such-a-rush&quot;&gt;&lt;a href=&quot;#Why-is-everyone-in-such-a-rush&quot; class=&quot;headerlink&quot; title=&quot;Why is everyone in such a rush?&quot;&gt;&lt;/a&gt;Why is everyone in such a rush?&lt;/h2&gt;</summary>
    
    
    
    <category term="others" scheme="http://woodyii.com/categories/others/"/>
    
    
    <category term="others" scheme="http://woodyii.com/tags/others/"/>
    
  </entry>
  
</feed>
